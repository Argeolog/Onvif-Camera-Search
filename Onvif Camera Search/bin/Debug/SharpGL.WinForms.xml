<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGL.WinForms</name>
    </assembly>
    <members>
        <member name="T:SharpGL.Controls.GLColourPicker">
            <summary>
            Summary description for GLColourPicker.
            </summary>
        </member>
        <member name="F:SharpGL.Controls.GLColourPicker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpGL.Controls.GLColourPicker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SharpGL.Controls.GLColourPicker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharpGL.Controls.MaterialListViewItem">
            <summary>
            This allows a list view item to be created from a material, which is really
            useful, especially for 3D apps. For more advanced functionality, just derive
            from this class, as there's a lot of good code here. Writing this sort of 
            class from scratch is pointless.
            
            At the moment this class is not working properly, because of changes to the
            material class, use with caution!
            </summary>
        </member>
        <member name="M:SharpGL.Controls.MaterialListViewItem.#ctor(SharpGL.SceneGraph.Assets.Material,System.Windows.Forms.ImageList)">
            <summary>
            This function creates the list view item from a material, with an image
            of the specified size.
            </summary>
            <param name="material">The material to create it from.</param>
            <param name="images">The set of images.</param>
        </member>
        <member name="T:SharpGL.Controls.VertexControl">
            <summary>
            Summary description for VertexControl.
            </summary>
        </member>
        <member name="F:SharpGL.Controls.VertexControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpGL.Controls.VertexControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SharpGL.Controls.VertexControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Converters.MaterialCollectionConverter">
            <summary>
            This converts the Material Collection into something more functional.
            </summary>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Converters.VertexConverter">
            <summary>
            The VertexConverter class allows you to edit vertices in the propties window.
            </summary>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Designers.OpenGLCtrlDesigner">
            <summary>
            This aids the design of the OpenGLCtrl
            </summary>
        </member>
        <member name="M:SharpGL.WinForms.NETDesignSurface.Designers.OpenGLCtrlDesigner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.WinForms.NETDesignSurface.Designers.OpenGLCtrlDesigner"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.WinForms.NETDesignSurface.Designers.OpenGLCtrlDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Remove Control properties that are not supported by the control.
            </summary>
            <param name="Properties"></param>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Editors.CameraCollectionEditor">
            <summary>
            This converts the Camera collection into something more usable (design time wise)
            by allowing all the types of camera to be added.
            </summary>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Editors.EvaluatorCollectionEditor">
            <summary>
            This converts the evaluator collection into something more usable (design time wise)
            by allowing all the types of evaluator to be added.
            </summary>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Editors.QuadricCollectionEditor">
            <summary>
            This converts the Quadric Collection into something more functional, and
            allows you to add many types of quadrics.
            </summary>
        </member>
        <member name="T:SharpGL.WinForms.NETDesignSurface.Editors.UITextureEditor">
            <summary>
            The texture editor makes Textures in the properties window much better,
            giving them a little thumbnail.
            </summary>
        </member>
        <member name="T:SharpGL.OpenGLControl">
            <summary>
            This is the basic OpenGL control object, it gives all of the basic OpenGL functionality.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.OpenGLControl"/> class.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.SetupDrawingTimer">
            <summary>
            Setups the drawing timer, based on the framerate settings.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.InitialiseOpenGL">
            <summary>
            Initialises OpenGL.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoRender">
            <summary>
            Manually perform rendering.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.Render(System.Drawing.Graphics)">
            <summary>
            Renders to the specified graphics.
            </summary>
            <param name="graphics">The graphics to render to.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoOpenGLInitialized">
            <summary>
            Calls the OpenGL initialized function.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoOpenGLDraw(SharpGL.RenderEventArgs)">
            <summary>
            Call this function in derived classes to do the OpenGL Draw event.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.DoGDIDraw(SharpGL.RenderEventArgs)">
            <summary>
            Call this function in derived classes to do the GDI Draw event.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.timerDrawing_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the timerDrawing control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.System#ComponentModel#ISupportInitialize#BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.System#ComponentModel#ISupportInitialize#EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.OpenGLInitialized">
            <summary>
            Occurs when OpenGL has been initialized.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.OpenGLDraw">
            <summary>
            Occurs when OpenGL drawing should be performed.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.GDIDraw">
            <summary>
            Occurs when GDI drawing should be performed.
            </summary>
        </member>
        <member name="E:SharpGL.OpenGLControl.Resized">
            <summary>
            Occurs when the control is resized. Can be used to perform custom viewport projections.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.timerDrawing">
            <summary>
            The timer used for drawing the control.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.gl">
            <summary>
            The OpenGL object for the control.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.stopwatch">
            <summary>
            A stopwatch used for timing rendering.
            </summary>
        </member>
        <member name="F:SharpGL.OpenGLControl.frameTime">
            <summary>
            The last frame time in milliseconds.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGLControl.OpenGL">
            <summary>
            Gets the OpenGL object.
            </summary>
            <value>The OpenGL.</value>
        </member>
        <member name="P:SharpGL.OpenGLControl.DrawFPS">
            <summary>
            Gets or sets a value indicating whether to draw FPS information.
            </summary>
            <value>
              <c>true</c> if FPS info should be drawn; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:SharpGL.OpenGLControl.frameRate">
            <summary>
            The framerate, in hertz.
            </summary>
        </member>
        <member name="P:SharpGL.OpenGLControl.FrameRate">
            <summary>
            Gets or sets the frame rate, in Hertz.
            </summary>
            <value>
            The frame rate, in Hertz.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.RenderContextType">
            <summary>
            Gets or sets the type of the render context.
            </summary>
            <value>
            The type of the render context.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.OpenGLVersion">
            <summary>
            Gets or sets the desired OpenGL version.
            </summary>
            <value>
            The desired OpenGL version.
            </value>
        </member>
        <member name="P:SharpGL.OpenGLControl.RenderTrigger">
            <summary>
            Gets or sets the render trigger.
            </summary>
            <value>
            The render trigger.
            </value>
        </member>
        <member name="F:SharpGL.OpenGLControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SharpGL.OpenGLControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SharpGL.OpenGLControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SharpGL.RenderEventHandler">
            <summary>
            Delegate for a Render Event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:SharpGL.RenderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SharpGL.RenderEventArgs">
            <summary>
            The RenderEventArgs - arguments used for render envets.
            </summary>
        </member>
        <member name="M:SharpGL.RenderEventArgs.#ctor(System.Drawing.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGL.RenderEventArgs"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="P:SharpGL.RenderEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="T:SharpGL.RenderTrigger">
            <summary>
            The RenderingMode - specifies how and when rendering 
            will occur in an OpenGL control.
            </summary>
        </member>
        <member name="F:SharpGL.RenderTrigger.TimerBased">
            <summary>
            The Default RenderingMode, TimerBased. This mode means that
            a timer will be set up based on the FPS property of the control.
            </summary>
        </member>
        <member name="F:SharpGL.RenderTrigger.Manual">
            <summary>
            Rendering must be performed manually by using the DoRender function.
            </summary>
        </member>
        <member name="T:SharpGL.SceneControl">
            <summary>
            The SceneControl is an OpenGLControl that contains and draws a Scene object.
            </summary>
        </member>
        <member name="M:SharpGL.SceneControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SharpGL.SceneControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SharpGL.SceneControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:PaintBackground"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SharpGL.SceneControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
    </members>
</doc>
